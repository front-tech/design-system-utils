@use "sass:map";
@use "sass:string";
@use "../settings/settings.scss" as settings;
@use "../tools/tools.scss";

/// Mixin whose objective is to create a source starting from an established route
///
/// @argument {string} $name
///   Font name.
/// @argument {string} $path
///   Font path.
/// @argument {string} $weight
///   Font weight.
/// @argument {string} $style
///   Font style.
/// @argument {string} $exts [eot woff2 woff ttf svg]
///   Font format.
///
/// @example scss
///     @include font-face("Helvetica--Neue--35", 500, normal);
///
/// @example css
///
///   @font-face {
///        font-family: "Helvetica--Neue--35";
///        font-style: normal;
///        font-weight: 500;
///        src: url("fonts/helvetica--neue/HelvNeue35.eot?") format("eot"),
///        url("fonts/helvetica--neue/HelvNeue35.woff2") format("woff2"),
///        url("fonts/helvetica--neue/HelvNeue35.woff") format("woff"),
///        url("fonts/helvetica--neue/HelvNeue35.ttf") format("truetype"),
///        url("fonts/helvetica--neue/HelvNeue35.svg#Helvetica--Neue--35") format("svg");
///   }
///
/// @group fonts

@mixin font-face($name, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + tools.str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map.has-key($extmods, $ext), $ext + map.get($extmods, $ext), $ext);
		$format: if(map.has-key($formats, $ext), map.get($formats, $ext), $ext);
		$src: append($src, url(string.quote(settings.$font-path + $name + "." + $extmod)) format(string.quote($format)), comma);
	}

	@font-face {
		font-family: string.quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}


@each $key,$value in settings.$fonts {
    $name: map.get($value, 'name');
    $weight: map.get($value, 'weight');
    $style: map.get($value, 'style');
    @include font-face($name, $weight, $style);
}