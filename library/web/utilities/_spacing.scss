@use "sass:map";
@use "sass:string";
@use '../settings/settings.scss';

/// Map that defines the prefix of the CSS class and property of the margins and padding mixin
/// @type map
/// @group spacing

$types: (
  mt: margin-top,
  mr: margin-right,
  mb: margin-bottom,
  ml: margin-left,
  pt: padding-top,
  pr: padding-right,
  pb: padding-bottom,
  pl: padding-left
);

/// Mixin that, starting from the breakpoints established in the configuration file, generates the classes of the grid system.
///
/// @argument {map}  $breakpoints [$breakpoints] Map set in initial setup
/// @argument {map}  $spacing [$spacing] Map set in initial setup
/// @requires $breakpoints Map defining break, gutter and offset points
/// @requires $spacing Map that defines the exponential value from one class to the next and the number of these classes to create
/// @requires $types Map that defines the prefix of the CSS class and property of the margins and padding mixin
///
/// @example scss
///
///       @include get-utilities-spacing()
///
/// @example css
///
///       @media only screen and (min-width: 0px) {
///        .mt-sm-1 {
///            margin-top: 5px;
///         }...
///       @media only screen and (min-width: 768px) {
///        .pb-md-2 {
///            padding-bottom: 10px;
///         }...
///       @media only screen and (min-width: 1440px) {
///        .ml-lg-3 {
///            margin-left: 15px;
///         }...
///
/// @group spacing

@mixin get-utilities-spacing($breakpoints:settings.$breakpoints, $spacing:settings.$spacing){
  @each $break, $breakpoint in $breakpoints {
    @media only screen and (min-width: map.get($breakpoint,"width")) {
      $limit: map.get($spacing, "limit");
      @each $type, $property in $types {
        @for $i from 1 through $limit {
          $value: string.unquote($i*map.get($spacing,increase) + "px");
          .#{$type}-#{$break}-#{$i} {
            #{$property}: $value;
          }
        }
      }
    }
  }
}

@include get-utilities-spacing();