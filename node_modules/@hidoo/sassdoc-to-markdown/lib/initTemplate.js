"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initTemplate;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

var _glob = _interopRequireDefault(require("glob"));

var _handlebars = _interopRequireDefault(require("handlebars"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const asyncReadFile = (0, _util.promisify)(_fs.default.readFile),
      asyncGlob = (0, _util.promisify)(_glob.default);
/**
 * default options
 *
 * @type {Object}
 */

const defaultOptions = {
  template: _path.default.resolve(__dirname, '../template/index.hbs'),
  partials: _path.default.resolve(__dirname, '../template/partials/*.hbs'),
  helpers: _path.default.resolve(__dirname, './helpers/**/*.js')
};
/**
 * init template
 *
 * @param {Object} [options={}] options
 *   @param {String} options.template template path
 *   @param {String} options.partials glob pattern of partials
 *   @param {String} options.helpers glob pattern of helpers
 * @return {Function}
 *
 * @example
 * (async () => {
 *   const template = await initTemplate({
 *     template: 'path/to/template.hbs',
 *     partials: 'path/to/partials/*.hbs',
 *     helpers: 'path/to/helpers/*.js'
 *   });
 * })();
 */

async function initTemplate(options = {}) {
  const opts = { ...defaultOptions,
    ...options
  },
        hbs = _handlebars.default.create(),
        template = await asyncReadFile(opts.template).then(content => content.toString()); // register partials


  await asyncGlob(opts.partials).then(files => Promise.all(files.map(file => asyncReadFile(file).then(content => {
    hbs.registerPartial(_path.default.basename(file, _path.default.extname(file)), content.toString());
  })))); // register helpers

  await asyncGlob(opts.helpers).then(files => files.forEach(file => {
    const helper = require(file); // eslint-disable-line node/global-require, import/no-dynamic-require


    if (typeof helper.register === 'function') {
      helper.register(hbs);
    }
  }));
  return hbs.compile(template);
}